package com.geishatokyo.apollon.json

import com.geishatokyo.apollon.annotation.InfoType
import com.geishatokyo.apollon.model.api._
import com.geishatokyo.apollon.model.api.response._
import com.geishatokyo.apollon.util.json.BaseTypeHints
import org.slf4j.{Logger, LoggerFactory}

/**
 * AutoGenerated
 */
class InfoTypeHints extends BaseTypeHints {

  //@replace[Hint-classes]
  override val generatedClasses = List(
    classOf[CreateRoomResponseInfo],
    classOf[JoinRoomResponseInfo],
    classOf[AcceptRoomResponseInfo],
    classOf[LeaveRoomResponseInfo],
    classOf[ReceiveApiEventsResponseInfo],
    classOf[SendOperationResponseInfo],
    classOf[ApiEventInfo],
    classOf[LeaveApiEventInfo],
    classOf[OperationApiEventInfo]
  )
  //@end

  override val hints: List[Class[_]] = generatedClasses

  val logger: Logger = LoggerFactory.getLogger(classOf[InfoTypeHints])

  override val classToHint : Map[Class[_],String] = {
    hints.flatMap(c => {
      val annos = c.getAnnotations.collect({
        case it : InfoType => {
          it
        }
      })
      if(annos.length == 0){
        logger.warn(s"Info ${c.getSimpleName} has no InfoType annotation")
      }
      annos.map(it => c -> it.value())
    }).toMap
  }

  override val hintToClass  : Map[String,Class[_]] = {
    hints.flatMap(c => {
      val annos = c.getAnnotations().collect({
        case it : InfoType => {
          it
        }
      })

      annos.map(it => it.value() -> c)
    }).toMap
  }
}
